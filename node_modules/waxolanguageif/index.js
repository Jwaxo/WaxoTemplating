//The "if" functionality for waxoLanguage
module.exports = function(parser, contents) { 
	console.log("Attempting to run 'if' function.");
	var bits = contents.split(/\s+/)  // ["if", "function"+]
	var ifFunction = "";
	
	var waxoDotpath = require('waxodotpath');
	
	for (i = 1;i<bits.length;i++) {
		ifFunction += " " + bits[i]; //This turns everything after "if " into a
		//legible function
	}
	
	parser.parse({
	"elseif" : elseif
	, "else" : elsefunc
	, "endif" : endif //The ending function MUST be "end + initial function"
	});

	return function(string, content) {
		var evaluatorChop = /(\s(\w+)\s)/g;
		var evaluatorChopBit;
		var evaluator;
		while (evaluatorChopBit = evaluatorChop.exec(ifFunction)) {
			switch(evaluatorChopBit[1].trim()) {
				case 'eq':
					evaluator = ' == ';
					break;
				case 'neq':
					evaluator = ' != ';
					break;
				case 'gt':
					evaluator = ' > ';
					break;
				case 'lt':
					evaluator = ' < ';
					break;
				case 'gte':
					evaluator = ' >= ';
					break;
				case 'lte':
					evaluator = ' <= ';
					break;
			}
			ifFunction = parser.replaceInto(evaluatorChopBit.index, evaluatorChopBit.index + evaluatorChopBit[1].length, evaluator, ifFunction);
		}
	
		var dotpathChop = /\s(\w+\.\w+)*\s/gi;
		console.log("Searching for dotpaths in '" + ifFunction + "'.");
		var dotpathChopBit;
		while (dotpathChopBit = dotpathChop.exec(ifFunction)) {
			console.log("Dotpath found: '" + dotpathChopBit[1] + "'.");
			var replacePath = waxoDotpath(dotpathChopBit[1].trim());
			var replaceVar = replacePath(parser.tags);
			ifFunction = parser.replaceInto(dotpathChopBit.index, dotpathChopBit.index + dotpathChopBit[1].length+1, replaceVar, ifFunction);
			console.log("New ifFunction: '" + ifFunction + "'.");
		}
		console.log("Dotpaths replaced to form function '" + ifFunction + "'.");
		
		var modifiedString = '';
		
		console.log("Evaluating statement '" + ifFunction + "'.");
		
		if (eval(ifFunction) == true){
			console.log("Statement evaluated as 'true'.");
			modifiedString = content;
		}
		
		return modifiedString;
	};
};

function elseif(tpl) {

	return function(modifiedString) {

		return modifiedString;
	};
}

function elsefunc(tpl) {

	return function(modifiedString) {

		return modifiedString;
	};
}

function endif(tpl, context) {

	return {
		tpl: tpl.substring(0, context.index)
	  , endpoint: context.index + context[0].length
	};
}